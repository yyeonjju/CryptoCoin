//
//  CoinChartDetailView.swift
//  CryptoCoin
//
//  Created by í•˜ì—°ì£¼ on 9/7/24.
//

import SwiftUI
import Charts

struct MarketPrice : Hashable {
    let category : String
    let color : Color
    let price : Double
}

struct ChartItem : Hashable, Identifiable {
    let id = UUID()
    let price : Double
    let index : Int
}

struct CoinChartDetailView: View {
    let id : String
    let marketPrice = [
        MarketPrice(category: "ê³ ê°€",color:.red , price: 394.3948),
        MarketPrice(category: "ì €ê°€",color:.blue , price: 394.3948),
    ]
    
    var body: some View {
        VStack(alignment : .leading){
            marketNameSection()
            
            Text("â‚© current_price")
                .font(.title)
                .fontWeight(.heavy)
            
            Text("price_change_percentage_24h")
                .padding(.bottom, 30)
            
            
            highLowPriceInfoSection()
                .padding(.bottom,70)
            
            Chart(mockChartData, id : \.id) { item in
                AreaMark(
                    x: .value("Index", item.index),
                    y: .value("Price", item.price)
                )
                .foregroundStyle(
                    LinearGradient(gradient: Gradient(colors: [.purple, .white]), startPoint: .top, endPoint: .bottom)
                )
            }
            
            

        }
        .padding()
//        .frame(maxWidth:.infinity)
//        .background(.yellow)
        .onAppear{
            print("ðŸ’ŽðŸ’ŽðŸ’ŽðŸ’ŽðŸ’Ž")
        }
        
    }
}

extension CoinChartDetailView {
    func marketNameSection() -> some View {
        HStack{
            AsyncImage(url: URL(string: ""))
                .background(.brown)
                .frame(width : 50, height : 50)
            Text("Name")
                .font(.title)
                .fontWeight(.heavy)
            Spacer()
        }
    }
    
    func highLowPriceInfoSection () -> some View{
        LazyVGrid(
            columns: [GridItem(.fixed(UIScreen.main.bounds.width/2)), GridItem(.fixed(UIScreen.main.bounds.width/2))]
        ){
            ForEach(marketPrice, id: \.self){ item in
                priceGridCard(item: item)
            }
        }
    }
    
    func priceGridCard(item : MarketPrice) -> some View {
        VStack(alignment : .leading){
            HStack{
                Text(item.category)
                    .foregroundStyle(item.color)
                    .font(.title3)
                    .fontWeight(.bold)
                Spacer()
            }

            Text("â‚© \(item.price)")
        }
        .frame(maxWidth: .infinity)
        .padding(.leading)
    }
}

#Preview {
    CoinChartDetailView(id: "bitcoin")
}


let mockChartData = mockSparkline.enumerated().map{ (offset, element) in
    ChartItem(price: element, index: offset)
}
let mockSparkline = [
    59193.30300146088,
    59150.83975964007,
    59168.47919932165,
    59005.487686977234,
    58975.01623858652,
    59019.35217652168,
    59131.873659225435,
    59151.42498480989,
    59197.45730249457,
    59084.71856653795,
    59082.916196810635,
    58981.11791553521,
    58893.87165410129,
    59051.49057272925,
    58891.92517026088,
    58853.53926445986,
    58925.461969271746,
    59027.35485109313,
    58972.13921541655,
    59021.65251754194,
    58922.336373481114,
    58644.573706545554,
    58534.480695240316,
    58503.32213878224,
    58331.72698808311,
    58131.30807597719,
    58193.83008303418,
    58318.17819955592,
    58271.00932331365,
    58200.559267471,
    57995.47189871917,
    58253.180839153545,
    57995.987458535354,
    57744.186227203034,
    57883.88880512065,
    58139.9258201694,
    57943.3495960086,
    58147.22230395923,
    58533.92089209154,
    58607.98923019267,
    58168.06231803104,
    57637.83573404503,
    57383.549100481745,
    57423.47573048797,
    57478.32132172089,
    57639.47999990747,
    57660.6053771104,
    57715.35936374439,
    57627.09794275039,
    57778.35227320422,
    57701.59785865507,
    57557.045542139196,
    57989.956749165074,
    58444.2439600214,
    58410.307545954296,
    58361.898572657774,
    58389.63264298334,
    58189.0157041461,
    58611.971365503894,
    58574.54981135888,
    58352.56971842717,
    58468.85708149525,
    58493.30439764116,
    58564.85288879264,
    59245.901046591396,
    59081.894737399656,
    59231.01284443869,
    59116.72450306674,
    59387.948038510054,
    59522.41951320161,
    59320.34837813365,
    59101.41640164991,
    59029.26825418049,
    59014.71587794109,
    58958.44061193983,
    59093.98582741865,
    58856.27591419819,
    59032.872760216815,
    59037.52112338955,
    59220.85676099221,
    59228.65531821293,
    58102.7723974071,
    57820.0858422582,
    57817.938308376615,
    57748.66507488688,
    57784.356878454455,
    58167.34072631633,
    58181.32218165241,
    58208.6399239705,
    58045.417628622956,
    57786.55294435445,
    57813.69706883217,
    56160.11214505884,
    56618.69625548734,
    56780.01228562741,
    56619.156108408315,
    56670.89762145378,
    56403.90393632768,
    56578.869167875564,
    56689.10810974751,
    56734.14155966517,
    56472.8487542655,
    56522.61204502666,
    56627.70902517211,
    56551.269804683594,
    56471.709617939356,
    57576.97600585592,
    58120.08717111554,
    58393.35074858366,
    57822.842857142816,
    57761.163784722565,
    57983.83427211197,
    57995.679460486725,
    58183.50471420094,
    58140.1028915011,
    58087.76243010292,
    58011.60188693599,
    57749.22706431235,
    57676.00401788212,
    57249.670261443425,
    57155.08709783639,
    57063.580676781254,
    57164.44799899651,
    57163.90747340435,
    56990.33886814557,
    56709.122352946004,
    56762.03833637063,
    56671.36783827192,
    56758.79147824886,
    57125.4501514749,
    56404.29960422861,
    56047.62020016585,
    56443.49795536377,
    56522.572068468406,
    56414.454392688735,
    56040.03890248612,
    56200.64911676952,
    56037.78751865841,
    56116.08146432956,
    56276.037013870904,
    56004.497575819725,
    56538.22821522616,
    56746.166395129345,
    56707.739984513784,
    56511.21182542301,
    56447.17153444231,
    56366.669702838466,
    55812.44318192622,
    55782.373950107845,
    55937.23817176504,
    56048.55200528273,
    55883.98715130142,
    56805.55106357134,
    55324.91474531126,
    54481.51033537016,
    54008.69564063515,
    54302.84348921811,
    53760.5950543657,
    53752.943586110996,
    53491.82745304818,
    53304.61527374619,
    53803.47840034575,
    53700.61737164216,
    53955.11336282272,
    53900.28358818041,
    53794.89842133255,
    53813.390908389156,
    53806.07395267369,
    54028.17614823898
  ]
